{"version":3,"sources":["webpack:///./src/pages/logica/9-validez.mdx","webpack:///./src/components/logic/truthtable.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","TitleSlide","Slide","Animate","Meta","Definition","TwoCols","Example","Flex","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","title","clase","parentName","animate","word","className","style","data-fragment-index","isMDXComponent","TruthTable","children","processRow","row","isHeader","cells","split","map","cell","includes","divides","main","replace","join","header","rows","length","shift","dangerouslySetInnerHTML","__html"],"mappings":"wPAUaA,G,UAAe,IAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAaL,EAAc,cAC3BM,EAAQN,EAAc,SACtBO,EAAUP,EAAc,WACxBQ,EAAOR,EAAc,QACrBS,EAAaT,EAAc,cAC3BU,EAAUV,EAAc,WACxBW,EAAUX,EAAc,WACxBY,EAAOZ,EAAc,QACrBa,EAAc,CAClBd,gBAEIe,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGf,EACF,8BACD,OAAO,YAACY,EAAD,iBAAeD,EAAiBX,EAAhC,CAAuCe,WAAYA,EAAYC,QAAQ,cAI5E,YAACb,EAAD,CAAYc,MAAM,UAAUC,MAAM,aAAaF,QAAQ,eACvD,YAACZ,EAAD,CAAOY,QAAQ,SACb,oDACA,2BAAU,sBAAQG,WAAW,KAAnB,6BAAV,gCAAwG,sBAAQA,WAAW,KAAnB,WAAxG,2DACA,YAACd,EAAD,CAASW,QAAQ,WACf,uDAEF,YAACX,EAAD,CAASW,QAAQ,WACf,yBACE,qBAAOG,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,QAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,UAIf,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,qDAEyD,uBAFzD,6CAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,gBAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,kEAEsE,uBAFtE,uCAEoH,uBAFpH,gCAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,kBAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,uCAE2C,uBAF3C,2BAE6E,uBAF7E,6BAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,oBAQV,YAACf,EAAD,CAAOY,QAAQ,SACb,oDACA,0CAAyB,sBAAQG,WAAW,KAAnB,6BAAzB,uDACA,YAACd,EAAD,CAASW,QAAQ,WACf,YAACV,EAAD,CAAMU,QAAQ,QACZ,sBACE,kBAAIG,WAAW,MAAf,IAAyB,kBAAIA,WAAW,MAAf,KAAzB,KACA,kBAAIA,WAAW,MAAf,IAAyB,kBAAIA,WAAW,MAAf,KAAzB,KAA6D,kBAAIA,WAAW,MAAf,KAA7D,KACA,kBAAIA,WAAW,MAAf,IAAyB,kBAAIA,WAAW,MAAf,KAAzB,MAA8D,kBAAIA,WAAW,MAAf,KAA9D,KAAkG,kBAAIA,WAAW,MAAf,MAAlG,OAGJ,4EAA2D,sBAAQA,WAAW,KAAnB,gBAA3D,MAAkH,sBAAQA,WAAW,KAAnB,kBAAlH,KACA,6GAGJ,YAACf,EAAD,CAAOY,QAAQ,SACb,oCACA,2BAAU,sBAAQG,WAAW,KAAnB,aAAV,8CACA,YAACZ,EAAD,CAAYa,SAAO,EAACC,KAAK,YAAYL,QAAQ,cAC3C,oFAAmE,sBAAQG,WAAW,KAAnB,YAAnE,0BAEF,mBAAKG,UAAU,YACnB,mBAAKA,UAAU,qBACb,mBAAKA,UAAU,YACb,wDACA,yCACA,2CAGJ,mBAAKA,UAAU,sBACb,mBAAKA,UAAU,YACb,mFACA,qDACA,kDAKF,YAAClB,EAAD,CAAOY,QAAQ,SACb,6CACA,+DACA,YAACR,EAAD,CAASe,MAAO,CACd,aAAgB,QACfP,QAAQ,WACT,uBACE,YAACX,EAAD,CAASW,QAAQ,WACf,qBAAG,sBAAQG,WAAW,KAAnB,0BACH,qBAAG,kBAAIA,WAAW,KAAf,uCAA2D,sBAAQA,WAAW,MAAnB,kBAA3D,sBAEL,mBAAKG,UAAU,sBACb,wDACA,yCACA,2CAGJ,uBACE,YAACjB,EAAD,CAASW,QAAQ,WACf,qBAAG,sBAAQG,WAAW,KAAnB,0BACH,qBAAG,kBAAIA,WAAW,KAAf,uCAA2D,sBAAQA,WAAW,MAAnB,iBAA3D,sBAEL,mBAAKG,UAAU,sBACb,4DACA,yCACA,6CAIN,YAACjB,EAAD,CAASW,QAAQ,WACf,kFAAiE,sBAAQG,WAAW,KAAnB,yBAAjE,OAGJ,YAACf,EAAD,CAAOY,QAAQ,SACb,+CACA,iFAAgE,sBAAQG,WAAW,KAAnB,kBAAhE,qBACA,8EACA,YAACX,EAAD,CAASe,MAAO,CACd,OAAU,UACTP,QAAQ,WACT,uBACE,YAACX,EAAD,CAASW,QAAQ,WACf,qBAAG,sBAAQG,WAAW,KAAnB,YACH,mFAGJ,uBACE,YAACd,EAAD,CAASW,QAAQ,WACf,qBAAG,sBAAQG,WAAW,KAAnB,YACH,oFAIN,YAACd,EAAD,CAASW,QAAQ,WACf,gEAGJ,YAACZ,EAAD,CAAOY,QAAQ,SACb,2CACA,wCAAuB,sBAAQG,WAAW,KAAnB,yBAAvB,+BAAgH,kBAAIA,WAAW,KAAf,kBAAhH,qBACA,YAACV,EAAD,CAASO,QAAQ,WACf,YAACR,EAAD,CAASQ,QAAQ,WACf,mBAAKM,UAAU,qBACb,wDACA,yCACA,0CAEF,mBAAKA,UAAU,qBACb,wDACA,yCACA,4CAIN,YAACjB,EAAD,CAASW,QAAQ,WACf,4CAA2B,sBAAQG,WAAW,KAAnB,kBAA3B,KACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,iDAAqE,sBAAQA,WAAW,KAAnB,kBAArE,YAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,MAA0B,sBAAQA,WAAW,KAAnB,aAA1B,+EAKR,YAACf,EAAD,CAAOY,QAAQ,SACb,iCACA,wDAAuC,kBAAIG,WAAW,KAAf,MAAvC,+BACA,YAACV,EAAD,CAASO,QAAQ,WACf,YAACN,EAAD,CAAMM,QAAQ,QACZ,mBAAKM,UAAU,qBACb,sDACA,yCACA,wCAEF,mBAAKA,UAAU,qBACb,kEACA,0DACA,yDAIN,YAACjB,EAAD,CAASW,QAAQ,WACf,oDAAmC,kBAAIG,WAAW,KAAf,UAAnC,kCAAwG,sBAAQA,WAAW,KAAnB,UAAxG,MAEF,YAACV,EAAD,CAASO,QAAQ,WACf,mBAAKM,UAAU,qBACb,yFACA,yCACA,wEAIN,YAAClB,EAAD,CAAOY,QAAQ,SACb,kCACA,4CACA,YAACX,EAAD,CAASW,QAAQ,WACf,yBACN,yBACE,kBAAIO,MAAO,CACD,aAAgB,oBAEhB,sBACE,8EACA,yDACA,qDAEV,iCAEF,kBAAIA,MAAO,CACD,aAAgB,oBAEhB,kBAAIA,MAAO,CACT,WAAc,SAEd,gEACA,uCACA,gDAEV,kBAAIA,MAAO,CACD,WAAc,SADxB,aAIF,sBACU,kBAAIA,MAAO,CACT,WAAc,SAEd,yDACA,uCACA,gDAEV,kBAAIA,MAAO,CACD,WAAc,SADxB,eAQF,YAACnB,EAAD,CAAOY,QAAQ,SACb,iDACA,uDAAsC,sBAAQG,WAAW,KAAnB,UAAtC,WAA4F,sBAAQA,WAAW,KAAnB,aAA5F,uEACA,YAACd,EAAD,CAASW,QAAQ,WACf,2EACA,gGAA+E,sBAAQG,WAAW,KAAnB,yBAA/E,6EAEF,qBAAOG,UAAU,wBACrB,yBACE,sBACE,mCACA,oCACA,8BACA,wCAGJ,yBACE,sBACE,kBAAIA,UAAU,MAAd,KACA,kBAAIA,UAAU,MAAd,MACA,kBAAIA,UAAU,MAAd,KACA,kBAAIA,UAAU,MAAd,QAEF,sBACE,kBAAIA,UAAU,MAAd,KACA,kBAAIA,UAAU,MAAd,MACA,kBAAIA,UAAU,MAAd,KACA,kBAAIA,UAAU,MAAd,QAEF,kBAAIC,MAAO,CACH,MAAS,MACT,eAAkB,eAClB,WAAc,SAEpB,kBAAID,UAAU,MAAd,KACA,kBAAIA,UAAU,MAAd,MACA,kBAAIA,UAAU,MAAd,KACA,kBAAIA,UAAU,MAAd,QAEF,sBACE,kBAAIA,UAAU,MAAd,KACA,kBAAIA,UAAU,MAAd,MACA,kBAAIA,UAAU,MAAd,KACA,kBAAIA,UAAU,MAAd,UAKF,YAAClB,EAAD,CAAOY,QAAQ,SACb,iCACA,YAACP,EAAD,CAASO,QAAQ,WACf,YAAC,IAAD,CAAUA,QAAQ,YAChB,yDACA,uCACA,iDAGJ,qBAAOM,UAAU,eACrB,yBACE,kBAAIA,UAAU,WAAWE,sBAAoB,KAC3C,4BACA,4BACA,kBAAIF,UAAU,WAAd,KACA,4BACA,2BACA,2BACA,4BACA,kBAAIA,UAAU,WAAd,MACA,kBAAIA,UAAU,WAAd,QAGJ,yBACE,sBACE,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,iBAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,MAIF,sBACE,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,iBAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,MAIF,sBACE,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,iBAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,MAIF,sBACE,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,iBAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,KAGA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,SAOF,YAAClB,EAAD,CAAOY,QAAQ,SACb,iCACA,YAACP,EAAD,CAASO,QAAQ,WACf,YAAC,IAAD,CAAUA,QAAQ,YAChB,gEACA,uCACA,iDAGJ,qBAAOM,UAAU,eACrB,yBACE,kBAAIA,UAAU,WAAWE,sBAAoB,KAC3C,4BACA,6BACA,kBAAIF,UAAU,YAAd,OACA,4BACA,6BACA,kBAAIA,UAAU,YAAd,OACA,kBAAIA,UAAU,YAAd,UAGJ,yBACE,sBACE,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,KACA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,MACA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,MACA,kBAAIA,UAAU,gBAAgBE,sBAAoB,KAAlD,MACA,kBAAIA,sBAAoB,IAAIF,UAAU,YAAtC,MACA,kBAAIA,UAAU,mBAAmBE,sBAAoB,KAArD,MACA,kBAAIF,UAAU,mBAAmBE,sBAAoB,KAArD,QAEF,sBACE,kBAAIA,sBAAoB,IAAIF,UAAU,YAAtC,KACA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,MACA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,MACA,kBAAIA,UAAU,gBAAgBE,sBAAoB,KAAlD,MACA,kBAAIA,sBAAoB,IAAIF,UAAU,YAAtC,MACA,kBAAIA,UAAU,mBAAmBE,sBAAoB,KAArD,MACA,kBAAIF,UAAU,mBAAmBE,sBAAoB,KAArD,QAEF,sBACE,kBAAIA,sBAAoB,IAAIF,UAAU,YAAtC,KACA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,MACA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,MACA,kBAAIA,UAAU,gBAAgBE,sBAAoB,KAAlD,MACA,kBAAIA,sBAAoB,IAAIF,UAAU,YAAtC,MACA,kBAAIA,UAAU,mBAAmBE,sBAAoB,KAArD,MACA,kBAAIF,UAAU,mBAAmBE,sBAAoB,KAArD,QAEF,sBACE,kBAAIA,sBAAoB,IAAIF,UAAU,YAAtC,KACA,kBAAIE,sBAAoB,IAAIF,UAAU,YAAtC,MACA,kBAAIE,sBAAoB,IAAIF,UAAU,oBAAtC,MACA,kBAAIA,UAAU,gBAAgBE,sBAAoB,KAAlD,MACA,kBAAIA,sBAAoB,IAAIF,UAAU,YAAtC,MACA,kBAAIA,UAAU,mBAAmBE,sBAAoB,KAArD,MACA,kBAAIF,UAAU,mBAAmBE,sBAAoB,KAArD,WAKF,YAACpB,EAAD,CAAOY,QAAQ,SACb,0CACA,mFAAkE,sBAAQG,WAAW,KAAnB,mBAAlE,KACA,YAACV,EAAD,CAASW,SAAO,EAACJ,QAAQ,WACvB,YAAC,IAAD,CAAUO,MAAO,CACf,UAAa,SACZP,QAAQ,YACT,2DACA,mDACA,iDAGJ,YAACX,EAAD,CAASW,QAAQ,WACf,2BAAU,sBAAQG,WAAW,KAAnB,WAAV,4BAAkF,sBAAQA,WAAW,KAAnB,mBAAlF,oDACA,oEAEF,YAACT,EAAD,CAAMM,QAAQ,QACZ,mBAAKM,UAAU,WAAWC,MAAO,CAC/B,MAAS,MACT,SAAY,QAEZ,qBAAG,kBAAIJ,WAAW,KAAf,uCACH,YAAC,IAAD,CAAUH,QAAQ,YAChB,4FACA,wDACA,2DAGJ,mBAAKM,UAAU,WAAWC,MAAO,CAC/B,MAAS,MACT,SAAY,QAEZ,qBAAG,kBAAIJ,WAAW,KAAf,2CACH,YAAC,IAAD,CAAUH,QAAQ,YAChB,gFACA,qDACA,oDAKR,YAACZ,EAAD,CAAOY,QAAQ,SACb,+CACA,mGAAkF,sBAAQG,WAAW,KAAnB,iBAAlF,KACA,YAACZ,EAAD,CAAYa,SAAO,EAACC,KAAK,gBAAgBL,QAAQ,cAAjD,gGAIA,YAACX,EAAD,CAASW,QAAQ,WACf,sEAAqD,sBAAQG,WAAW,KAAnB,YAArD,UAA4G,kBAAIA,WAAW,KAAf,MAA5G,uCACA,mGAAkF,sBAAQA,WAAW,KAAnB,gBAAlF,uCAGJ,YAACf,EAAD,CAAOY,QAAQ,SACb,8CACA,YAACX,EAAD,CAASW,QAAQ,WACf,yBACE,qBAAOG,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,QAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,UAIf,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,yDAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,gEAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,8DAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,8DAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,mEAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,eAYdL,EAAWW,gBAAiB,G,yGCzoBrB,SAASC,EAAT,GAA6C,IAAvBC,EAAsB,EAAtBA,SAAa3B,EAAS,4BACjD,SAAS4B,EAAWC,EAAKC,GACvB,IAAIC,EAAQF,EAAIG,MAAM,KA2BtB,MAAO,QAzBPD,EAAQA,EAAME,KAAI,SAACC,GACjB,IAAId,IAAUc,EAAKC,SAAS,KACxBC,IAAUF,EAAKC,SAAS,KACxBE,IAAOH,EAAKC,SAAS,KAEzB,OAAiB,IAAbL,EAEA,eAAcV,EAAU,WAAa,IAArC,KACEgB,EAAU,UAAY,IADxB,KAGAF,EAAKI,QAAQ,OAAQ,IACrB,QAIA,eAAclB,EAAU,WAAa,IAArC,KACEgB,EAAU,UAAY,IADxB,KAGEC,EAAO,OAAS,IAHlB,KAKAH,EAAKI,QAAQ,SAAU,IACvB,YAIgBC,KAAK,IAAM,QAGnC,IAAIC,EAAS,GACTC,EAAOd,EAAS3B,MAAM2B,SAASK,MAAM,aAUzC,OARIS,EAAKC,OAAS,IAGhBF,EAASZ,EAFTY,EAASC,EAAKE,SAEc,IAG9BF,EAAOA,EAAKR,IAAIL,GAAY,GAG1B,2CAAW5B,EAAX,CAAkBsB,UAAU,gBAC1B,2BAAOsB,wBAAyB,CAAEC,OAAQL,KAC1C,2BAAOI,wBAAyB,CAAEC,OAAQJ,EAAKF,KAAK","file":"component---src-pages-logica-9-validez-mdx-e5b0a073dcb9a0b2763c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/juanrloaiza/Documents/Universidad/URosario/2021-1S/Diapositivas/src/components/presentation.js\";\nimport { Argument } from \"/src/components/logic/argument\";\nimport { TruthTable } from \"/src/components/logic/truthtable\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst TitleSlide = makeShortcode(\"TitleSlide\");\nconst Slide = makeShortcode(\"Slide\");\nconst Animate = makeShortcode(\"Animate\");\nconst Meta = makeShortcode(\"Meta\");\nconst Definition = makeShortcode(\"Definition\");\nconst TwoCols = makeShortcode(\"TwoCols\");\nconst Example = makeShortcode(\"Example\");\nconst Flex = makeShortcode(\"Flex\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <TitleSlide title=\"Validez\" clase=\"Lógica ECH\" mdxType=\"TitleSlide\" />\n    <Slide mdxType=\"Slide\">\n      <h1>{`En el capítulo anterior...`}</h1>\n      <p>{`Un `}<strong parentName=\"p\">{`conjunto de proposiciones`}</strong>{` se decía consistente sii es `}<strong parentName=\"p\">{`posible`}</strong>{` que todas sus proposiciones sean verdaderas al tiempo.`}</p>\n      <Animate mdxType=\"Animate\">\n        <p>{`¿Consistente o inconsistente?`}</p>\n      </Animate>\n      <Animate mdxType=\"Animate\">\n        <table>\n          <thead parentName=\"table\">\n            <tr parentName=\"thead\">\n              <th parentName=\"tr\" {...{\n                \"align\": null\n              }}></th>\n              <th parentName=\"tr\" {...{\n                \"align\": null\n              }}></th>\n            </tr>\n          </thead>\n          <tbody parentName=\"table\">\n            <tr parentName=\"tbody\">\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`{ Colombia o España hacen parte de Latinoamérica; `}<br />{` España no hace parte de Latinoamérica. }`}</td>\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Consistente`}</td>\n            </tr>\n            <tr parentName=\"tbody\">\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`{ Si Colombia no está en Latinoamérica, España está en Europa; `}<br />{` Colombia no está en Latinoamérica; `}<br />{` España no está en Europa. }`}</td>\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Inconsistente`}</td>\n            </tr>\n            <tr parentName=\"tbody\">\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`{ Colombia está en América del Sur; `}<br />{` México está en Europa. `}<br />{` Australia está en Asia.}`}</td>\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Consistente`}</td>\n            </tr>\n          </tbody>\n        </table>\n      </Animate>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Conjuntos de proposiciones`}</h1>\n      <p>{`Recordemos que un `}<strong parentName=\"p\">{`conjunto de proposiciones`}</strong>{` puede ser cualquier agrupamiento de proposiciones.`}</p>\n      <Animate mdxType=\"Animate\">\n        <Meta mdxType=\"Meta\">\n          <ul>\n            <li parentName=\"ul\">{`{`}<em parentName=\"li\">{`P`}</em>{`}`}</li>\n            <li parentName=\"ul\">{`{`}<em parentName=\"li\">{`P`}</em>{`, `}<em parentName=\"li\">{`Q`}</em>{`}`}</li>\n            <li parentName=\"ul\">{`{`}<em parentName=\"li\">{`P`}</em>{` & `}<em parentName=\"li\">{`Q`}</em>{`, `}<em parentName=\"li\">{`~P`}</em>{`}`}</li>\n          </ul>\n        </Meta>\n        <p>{`De conjuntos de proposiciones podemos decir que son `}<strong parentName=\"p\">{`consistentes`}</strong>{` o `}<strong parentName=\"p\">{`inconsistentes`}</strong>{`.`}</p>\n        <p>{`Hay sin embargo algunos conjuntos especiales sobre los que podemos decir algo más.`}</p>\n      </Animate>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Argumentos`}</h1>\n      <p>{`Un `}<strong parentName=\"p\">{`argumento`}</strong>{` es un conjunto de proposiciones especial.`}</p>\n      <Definition animate word=\"Argumento\" mdxType=\"Definition\">\n        <p>{`Conjunto de proposiciones en las que unas (conclusiones) se `}<strong parentName=\"p\">{`infieren`}</strong>{` de otras (premisas).`}</p>\n      </Definition>\n      <div className=\"two-cols\">\n  <div className=\"col-left fragment\">\n    <div className=\"argument\">\n      <p>Todos los humanos son mortales.</p>\n      <p>Jorge es humano.</p>\n      <p>Jorge es mortal.</p>\n    </div>\n  </div>\n  <div className=\"col-right fragment\">\n    <div className=\"argument\">\n      <p>Si alguien saca 5.0 en el parcial, el profesor será feliz.</p>\n      <p>Iván sacó 5.0 en el parcial.</p>\n      <p>El profesor es feliz.</p>\n    </div>\n  </div>\n      </div>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Tipos de argumentos`}</h1>\n      <p>{`Hay dos tipos generales de argumentos.`}</p>\n      <TwoCols style={{\n        \"marginBottom\": \"1rem\"\n      }} mdxType=\"TwoCols\">\n        <div>\n          <Animate mdxType=\"Animate\">\n            <p><strong parentName=\"p\">{`Argumentos deductivos`}</strong></p>\n            <p><em parentName=\"p\">{`Argumentos cuya conclusión se sigue `}<strong parentName=\"em\">{`necesariamente`}</strong>{` de las premisas`}</em></p>\n          </Animate>\n          <div className=\" fragment argument\">\n            <p>{`Todos los humanos son mortales.`}</p>\n            <p>{`Jorge es humano.`}</p>\n            <p>{`Jorge es mortal.`}</p>\n          </div>\n        </div>\n        <div>\n          <Animate mdxType=\"Animate\">\n            <p><strong parentName=\"p\">{`Argumentos inductivos`}</strong></p>\n            <p><em parentName=\"p\">{`Argumentos cuya conclusión se sigue `}<strong parentName=\"em\">{`probablemente`}</strong>{` de las premisas`}</em></p>\n          </Animate>\n          <div className=\" fragment argument\">\n            <p>{`La mayoría de humanos son diestros.`}</p>\n            <p>{`Jorge es humano.`}</p>\n            <p>{`Jorge es diestro.`}</p>\n          </div>\n        </div>\n      </TwoCols>\n      <Animate mdxType=\"Animate\">\n        <p>{`A continuación nos concentraremos en cómo formular buenos `}<strong parentName=\"p\">{`argumentos deductivos`}</strong>{`.`}</p>\n      </Animate>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Argumentos deductivos`}</h1>\n      <p>{`Un argumento deductivo es aquel cuya conclusión se sigue `}<strong parentName=\"p\">{`necesariamente`}</strong>{` de las premisas.`}</p>\n      <p>{`Hay dos criterios para juzgar un argumento deductivo.`}</p>\n      <TwoCols style={{\n        \"margin\": \"2rem 0\"\n      }} mdxType=\"TwoCols\">\n        <div>\n          <Animate mdxType=\"Animate\">\n            <p><strong parentName=\"p\">{`Validez`}</strong></p>\n            <p>{`Que la conclusión se siga con necesidad de las premisas.`}</p>\n          </Animate>\n        </div>\n        <div>\n          <Animate mdxType=\"Animate\">\n            <p><strong parentName=\"p\">{`Solidez`}</strong></p>\n            <p>{`Que el argumento sea válido y tenga premisas verdaderas.`}</p>\n          </Animate>\n        </div>\n      </TwoCols>\n      <Animate mdxType=\"Animate\">\n        <p>{`Veamos cada una de estas propiedades.`}</p>\n      </Animate>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Validez deductiva`}</h1>\n      <p>{`Un argumento es `}<strong parentName=\"p\">{`deductivamente válido`}</strong>{` sii su conclusión se sigue `}<em parentName=\"p\">{`necesariamente`}</em>{` de las premisas.`}</p>\n      <Example mdxType=\"Example\">\n        <TwoCols mdxType=\"TwoCols\">\n          <div className=\"argument fragment\">\n            <p>{`Todos los humanos son mortales.`}</p>\n            <p>{`Jorge es humano.`}</p>\n            <p>{`Jorge es mortal.`}</p>\n          </div>\n          <div className=\"argument fragment\">\n            <p>{`Todos los humanos son mortales.`}</p>\n            <p>{`Mario es mortal.`}</p>\n            <p>{`Mario es humano.`}</p>\n          </div>\n        </TwoCols>\n      </Example>\n      <Animate mdxType=\"Animate\">\n        <p>{`¿Qué significa este `}<strong parentName=\"p\">{`necesariamente`}</strong>{`?`}</p>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Si las premisas son verdaderas, la conclusión `}<strong parentName=\"p\">{`necesariamente`}</strong>{` lo es.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Es `}<strong parentName=\"p\">{`imposible`}</strong>{` que las premisas sean verdaderas mientras que la conclusión sea falsa.`}</p>\n          </li>\n        </ul>\n      </Animate>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Solidez`}</h1>\n      <p>{`Un argumento puede ser válido y `}<em parentName=\"p\">{`no`}</em>{` tener premisas verdaderas.`}</p>\n      <Example mdxType=\"Example\">\n        <Flex mdxType=\"Flex\">\n          <div className=\"fragment argument\">\n            <p>{`Todos los humanos son azules.`}</p>\n            <p>{`Jorge es humano.`}</p>\n            <p>{`Jorge es azul.`}</p>\n          </div>\n          <div className=\"fragment argument\">\n            <p>{`El profesor estudió filosofía o economía.`}</p>\n            <p>{`El profesor no estudió filosofía.`}</p>\n            <p>{`El profesor estudió economía.`}</p>\n          </div>\n        </Flex>\n      </Example>\n      <Animate mdxType=\"Animate\">\n        <p>{`Si un argumento es válido y `}<em parentName=\"p\">{`además`}</em>{` tiene premisas verdaderas, es `}<strong parentName=\"p\">{`sólido`}</strong>{`.`}</p>\n      </Animate>\n      <Example mdxType=\"Example\">\n        <div className=\"fragment argument\">\n          <p>{`Si estoy en Bogotá, estoy a más de 1000m sobre el nivel del mar.`}</p>\n          <p>{`Estoy en Bogotá.`}</p>\n          <p>{`Estoy a más de 1000m sobre el nivel del mar.`}</p>\n        </div>\n      </Example>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Ejemplos`}</h1>\n      <p>{`¿Válido o inválido?`}</p>\n      <Animate mdxType=\"Animate\">\n        <table>\n  <tbody>\n    <tr style={{\n              \"borderBottom\": \"1px solid black\"\n            }}>\n              <td>\n                <p>{`Si algún estudiante pierde el parcial, estaré triste.`}</p>\n                <p>{`Un estudiante perdió el parcial.`}</p>\n                <p>{`Por lo tanto, estoy triste.`}</p>\n              </td>\n      <td>Válido</td>\n    </tr>\n    <tr style={{\n              \"borderBottom\": \"1px solid black\"\n            }}>\n              <td style={{\n                \"paddingTop\": \"1rem\"\n              }}>\n                <p>{`Basta con estudiar para pasar el curso.`}</p>\n                <p>{`Pasé el curso.`}</p>\n                <p>{`Por lo tanto, estudié.`}</p>\n              </td>\n      <td style={{\n                \"paddingTop\": \"1rem\"\n              }}>Inválido</td>\n    </tr>\n    <tr>\n              <td style={{\n                \"paddingTop\": \"1rem\"\n              }}>\n                <p>{`Si no estudio, no paso el curso.`}</p>\n                <p>{`Pasé el curso.`}</p>\n                <p>{`Por lo tanto, estudié.`}</p>\n              </td>\n      <td style={{\n                \"paddingTop\": \"1rem\"\n              }}>Válido</td>\n    </tr>\n  </tbody>\n        </table>\n      </Animate>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Usando tablas de verdad`}</h1>\n      <p>{`Recordemos que un argumento es `}<strong parentName=\"p\">{`válido`}</strong>{` sii es `}<strong parentName=\"p\">{`imposible`}</strong>{` que sus premisas sean verdaderas mientras su conclusión sea falsa.`}</p>\n      <Animate mdxType=\"Animate\">\n        <p>{`¿Cómo podremos probar esto en una tabla de verdad?`}</p>\n        <p>{`Si es imposible que sus premisas sean verdaderas y su conclusión falsa, `}<strong parentName=\"p\">{`no existirá situación`}</strong>{` en la que las premisas sean todas verdaderas y la conclusión sea falsa.`}</p>\n      </Animate>\n      <table className=\"fragment truth-table\">\n  <thead>\n    <tr>\n      <th>Premisa 1</th>\n      <th> Premisa 2</th>\n      <th> ...</th>\n      <th> Conclusión </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td className=\"  \">V</td>\n      <td className=\"  \"> V</td>\n      <td className=\"  \"> </td>\n      <td className=\"  \"> V </td>\n    </tr>\n    <tr>\n      <td className=\"  \">V</td>\n      <td className=\"  \"> F</td>\n      <td className=\"  \"> </td>\n      <td className=\"  \"> V </td>\n    </tr>\n    <tr style={{\n            \"color\": \"red\",\n            \"textDecoration\": \"line-through\",\n            \"fontWeight\": \"bold\"\n          }}>\n      <td className=\"  \">V</td>\n      <td className=\"  \"> V</td>\n      <td className=\"  \"> </td>\n      <td className=\"  \"> F </td>\n    </tr>\n    <tr>\n      <td className=\"  \">F</td>\n      <td className=\"  \"> F</td>\n      <td className=\"  \"> </td>\n      <td className=\"  \"> F</td>\n    </tr>\n  </tbody>\n      </table>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Ejemplo`}</h1>\n      <Example mdxType=\"Example\">\n        <Argument mdxType=\"Argument\">\n          <p>{`Si no estudio, no paso el curso.`}</p>\n          <p>{`Pasé el curso.`}</p>\n          <p>{`Por lo tanto, estudié.`}</p>\n        </Argument>\n      </Example>\n      <table className=\"truth-table\">\n  <thead>\n    <tr className=\"fragment\" data-fragment-index=\"1\">\n      <th>Ea</th>\n      <th>Pa</th>\n      <th className=\"divides\">~</th>\n      <th>Ea</th>\n      <th>→</th>\n      <th>~</th>\n      <th>Pa</th>\n      <th className=\"divides\">Pa</th>\n      <th className=\"divides\">Ea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td data-fragment-index=\"2\" className=\"fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"2\" className=\"fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"4\" className=\"divides fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"3\" className=\"fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"6\" className=\"main fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"5\" className=\"fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"3\" className=\"fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"3\" className=\"divides fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"3\" className=\"divides fragment\">\n        V\n      </td>\n    </tr>\n    <tr>\n      <td data-fragment-index=\"2\" className=\"fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"2\" className=\"fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"4\" className=\"divides fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"3\" className=\"fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"6\" className=\"main fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"5\" className=\"fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"3\" className=\"fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"3\" className=\"divides fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"3\" className=\"divides fragment\">\n        V\n      </td>\n    </tr>\n    <tr>\n      <td data-fragment-index=\"2\" className=\"fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"2\" className=\"fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"4\" className=\"divides fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"3\" className=\"fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"6\" className=\"main fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"5\" className=\"fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"3\" className=\"fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"3\" className=\"divides fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"3\" className=\"divides fragment\">\n        F\n      </td>\n    </tr>\n    <tr>\n      <td data-fragment-index=\"2\" className=\"fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"2\" className=\"fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"4\" className=\"divides fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"3\" className=\"fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"6\" className=\"main fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"5\" className=\"fragment\">\n        V\n      </td>\n      <td data-fragment-index=\"3\" className=\"fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"3\" className=\"divides fragment\">\n        F\n      </td>\n      <td data-fragment-index=\"3\" className=\"divides fragment\">\n        F\n      </td>\n    </tr>\n  </tbody>\n      </table>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Ejemplo`}</h1>\n      <Example mdxType=\"Example\">\n        <Argument mdxType=\"Argument\">\n          <p>{`Basta con estudiar para pasar el curso.`}</p>\n          <p>{`Pasé el curso.`}</p>\n          <p>{`Por lo tanto, estudié.`}</p>\n        </Argument>\n      </Example>\n      <table className=\"truth-table\">\n  <thead>\n    <tr className=\"fragment\" data-fragment-index=\"1\">\n      <th>Ea</th>\n      <th> Pa</th>\n      <th className=\" divides\"> Ea</th>\n      <th> →</th>\n      <th> Pa</th>\n      <th className=\" divides\"> Pa</th>\n      <th className=\" divides\"> Ea </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td data-fragment-index=\"2\" className=\"fragment\">V</td>\n      <td data-fragment-index=\"2\" className=\"fragment\"> V</td>\n      <td data-fragment-index=\"3\" className=\"divides fragment\"> V</td>\n      <td className=\"main fragment\" data-fragment-index=\"4\"> V</td>\n      <td data-fragment-index=\"3\" className=\"fragment\"> V</td>\n      <td className=\"divides fragment\" data-fragment-index=\"3\"> V</td>\n      <td className=\"divides fragment\" data-fragment-index=\"3\"> V </td>\n    </tr>\n    <tr>\n      <td data-fragment-index=\"2\" className=\"fragment\">V</td>\n      <td data-fragment-index=\"2\" className=\"fragment\"> F</td>\n      <td data-fragment-index=\"3\" className=\"divides fragment\"> V</td>\n      <td className=\"main fragment\" data-fragment-index=\"4\"> F</td>\n      <td data-fragment-index=\"3\" className=\"fragment\"> F</td>\n      <td className=\"divides fragment\" data-fragment-index=\"3\"> F</td>\n      <td className=\"divides fragment\" data-fragment-index=\"3\"> V </td>\n    </tr>\n    <tr>\n      <td data-fragment-index=\"2\" className=\"fragment\">F</td>\n      <td data-fragment-index=\"2\" className=\"fragment\"> V</td>\n      <td data-fragment-index=\"3\" className=\"divides fragment\"> F</td>\n      <td className=\"main fragment\" data-fragment-index=\"4\"> V</td>\n      <td data-fragment-index=\"3\" className=\"fragment\"> V</td>\n      <td className=\"divides fragment\" data-fragment-index=\"3\"> V</td>\n      <td className=\"divides fragment\" data-fragment-index=\"3\"> F </td>\n    </tr>\n    <tr>\n      <td data-fragment-index=\"2\" className=\"fragment\">F</td>\n      <td data-fragment-index=\"2\" className=\"fragment\"> F</td>\n      <td data-fragment-index=\"3\" className=\"divides fragment\"> F</td>\n      <td className=\"main fragment\" data-fragment-index=\"4\"> V</td>\n      <td data-fragment-index=\"3\" className=\"fragment\"> F</td>\n      <td className=\"divides fragment\" data-fragment-index=\"3\"> F</td>\n      <td className=\"divides fragment\" data-fragment-index=\"3\"> F </td>\n    </tr>\n  </tbody>\n      </table>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Validez y verdad`}</h1>\n      <p>{`Hemos dicho que un argumento puede ser válido aunque tenga `}<strong parentName=\"p\">{`premisas falsas`}</strong>{`.`}</p>\n      <Example animate mdxType=\"Example\">\n        <Argument style={{\n          \"marginTop\": \"-1rem\"\n        }} mdxType=\"Argument\">\n          <p>{`Juan estudió filosofía o economía.`}</p>\n          <p>{`Juan no estudió filosofía.`}</p>\n          <p>{`Juan estudió economía.`}</p>\n        </Argument>\n      </Example>\n      <Animate mdxType=\"Animate\">\n        <p>{`La `}<strong parentName=\"p\">{`validez`}</strong>{` no tiene que ver con la `}<strong parentName=\"p\">{`verdad de hecho`}</strong>{` de las proposiciones que componen un argumento.`}</p>\n        <p>{`Los siguientes casos también son posibles.`}</p>\n      </Animate>\n      <Flex mdxType=\"Flex\">\n        <div className=\"fragment\" style={{\n          \"width\": \"50%\",\n          \"fontSize\": \"90%\"\n        }}>\n          <p><em parentName=\"p\">{`Inválido con conclusión verdadera.`}</em></p>\n          <Argument mdxType=\"Argument\">\n            <p>{`Si Duque es presidente de Colombia, Colombia está en Latinoamérica.`}</p>\n            <p>{`Colombia está en Latinoamérica.`}</p>\n            <p>{`Duque es presidente de Colombia.`}</p>\n          </Argument>\n        </div>\n        <div className=\"fragment\" style={{\n          \"width\": \"50%\",\n          \"fontSize\": \"90%\"\n        }}>\n          <p><em parentName=\"p\">{`Inválido con proposiciones verdaderas.`}</em></p>\n          <Argument mdxType=\"Argument\">\n            <p>{`Si estudian en el Rosario, estudian en una universidad.`}</p>\n            <p>{`Estudian en una universidad.`}</p>\n            <p>{`Estudian en el Rosario.`}</p>\n          </Argument>\n        </div>\n      </Flex>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Demostrando invalidez`}</h1>\n      <p>{`Cuando demostramos la invalidez de un argumento, lo hacemos encontrando un `}<strong parentName=\"p\">{`contraejemplo`}</strong>{`.`}</p>\n      <Definition animate word=\"Contraejemplo\" mdxType=\"Definition\">\n  Situación que muestra que la conclusión puede ser falsa aunque las premisas\n  sean verdaderas.\n      </Definition>\n      <Animate mdxType=\"Animate\">\n        <p>{`Un contrajemplo demuestra que el argumento es `}<strong parentName=\"p\">{`inválido`}</strong>{`, pero `}<em parentName=\"p\">{`no`}</em>{` que sus proposiciones sean falsas.`}</p>\n        <p>{`Para demostrar que alguna de las premisas es falsa (i.e., que el argumento `}<strong parentName=\"p\">{`no es sólido`}</strong>{`) necesitamos otras herramientas.`}</p>\n      </Animate>\n    </Slide>\n    <Slide mdxType=\"Slide\">\n      <h1>{`Curiosidades lógicas`}</h1>\n      <Animate mdxType=\"Animate\">\n        <table>\n          <thead parentName=\"table\">\n            <tr parentName=\"thead\">\n              <th parentName=\"tr\" {...{\n                \"align\": null\n              }}></th>\n              <th parentName=\"tr\" {...{\n                \"align\": null\n              }}></th>\n            </tr>\n          </thead>\n          <tbody parentName=\"table\">\n            <tr parentName=\"tbody\">\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Un argumento cuya conclusión sea verdadera es válido.`}</td>\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Falso`}</td>\n            </tr>\n            <tr parentName=\"tbody\">\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Un argumento cuyas premisas sean falsas no puede ser válido.`}</td>\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Falso`}</td>\n            </tr>\n            <tr parentName=\"tbody\">\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Un argumento cuyas premisas sean inconsistentes es válido.`}</td>\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Verdadero`}</td>\n            </tr>\n            <tr parentName=\"tbody\">\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Un argumento cuya conclusión sea una tautología es válido.`}</td>\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Verdadero`}</td>\n            </tr>\n            <tr parentName=\"tbody\">\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Un argumento cuya conclusión sea una contradicción es inválido.`}</td>\n              <td parentName=\"tr\" {...{\n                \"align\": null\n              }}>{`Falso`}</td>\n            </tr>\n          </tbody>\n        </table>\n      </Animate>\n    </Slide>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\";\n\nexport function TruthTable({ children, ...props }) {\n  function processRow(row, isHeader) {\n    let cells = row.split(\",\");\n\n    cells = cells.map((cell) => {\n      let animate = cell.includes(\"*\") ? true : false;\n      let divides = cell.includes(\"|\") ? true : false;\n      let main = cell.includes(\"!\") ? true : false;\n\n      if (isHeader === true) {\n        return (\n          `<th class='${animate ? \"fragment\" : \"\"} ${\n            divides ? \"divides\" : \"\"\n          }'>` +\n          cell.replace(/[*|]/, \"\") +\n          \"</th>\"\n        );\n      } else {\n        return (\n          `<td class='${animate ? \"fragment\" : \"\"} ${\n            divides ? \"divides\" : \"\"\n          } ${\n            main ? \"main\" : \"\"\n          }'>` +\n          cell.replace(/[*!|]+/, \"\") +\n          \"</td>\"\n        );\n      }\n    });\n    return \"<tr>\" + cells.join(\"\") + \"</tr>\";\n  }\n\n  let header = \"\";\n  let rows = children.props.children.split(\"\\\\newline\");\n\n  if (rows.length > 1) {\n    header = rows.shift();\n\n    header = processRow(header, true);\n  }\n\n  rows = rows.map(processRow, false);\n\n  return (\n    <table {...props} className=\"truth-table\">\n      <thead dangerouslySetInnerHTML={{ __html: header }} />\n      <tbody dangerouslySetInnerHTML={{ __html: rows.join(\"\") }} />\n    </table>\n  );\n}\n"],"sourceRoot":""}