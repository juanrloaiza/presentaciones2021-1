{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/components/animate.js","webpack:///./src/components/presentation.js","webpack:///./src/components/slide.js","webpack:///./src/components/psection.js","webpack:///./src/pages/logica/2-predicacion.mdx","webpack:///./src/components/titleslide.js"],"names":["TwoCols","children","props","elements","React","Children","toArray","className","Flex","style","display","justifyContent","margin","Card","title","fragmentListItem","li","cloneElement","components","ul","map","ol","table","newChildren","child","originalType","newBody","row","newRow","cell","createElement","Animate","updatedChildren","Presentation","render","shortcodes","Slide","TitleSlide","PSection","Example","Tooltip","Definition","Meta","height","this","Component","secTitle","sectionSlides","_frontmatter","makeShortcode","name","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","mdxType","clase","parentName","word","animate","width","align","data-fragment-index","isMDXComponent","date","Date","getFullYear"],"mappings":"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","file":"component---src-pages-logica-2-predicacion-mdx-d248ea4fbb2b938301a9.js","sourcesContent":["import React from \"react\";\n\nexport function TwoCols({ children, ...props }) {\n  let elements = React.Children.toArray(children);\n\n  return (\n    <div className=\"two-cols\" {...props}>\n      <div className={`col-left ${props.className}`}>{elements[0]}</div>\n      <div className={`col-right ${props.className}`}>{elements[1]}</div>\n    </div>\n  );\n}\n\nexport function Flex(props) {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        margin: \"1rem\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n}\n\nexport function Card(props) {\n  return (\n    <div className=\"card\">\n      {props.title ? <div className=\"card-title\">{props.title}</div> : null}\n      <div className=\"card-body\">{props.children}</div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { MDXProvider } from \"@mdx-js/react\";\n\nconst fragmentListItem = (li) => {\n  return React.cloneElement(li, { className: \"fragment\" });\n};\n\nconst ulFragment = ({ children, ...props }) => {\n  return <ul>{React.Children.map(children, fragmentListItem)}</ul>;\n};\n\nconst olFragment = ({ children, ...props }) => {\n  return <ol>{React.Children.map(children, fragmentListItem)}</ol>;\n};\n\nconst tableFragment = ({ children, ...props }) => {\n  let newChildren = React.Children.map(children, (child) => {\n    if (child.props.originalType === \"tbody\") {\n      let newBody = React.Children.map(child.props.children, (row) => {\n        let newRow = React.Children.map(row.props.children, (cell) => {\n          return React.cloneElement(cell, { className: \"fragment\" });\n        });\n        return React.createElement(\"tr\", {}, newRow);\n      });\n      return React.createElement(\"tbody\", {}, newBody);\n    } else {\n      return child;\n    }\n  });\n  return React.createElement(\"table\", {...props}, newChildren);\n};\n\nconst components = {\n  ul: ulFragment,\n  ol: olFragment,\n  table: tableFragment,\n};\n\nexport function Animate({ children, ...props }) {\n  let updatedChildren = React.Children.map(children, (child) => {\n    return React.cloneElement(child, { className: \"fragment\" });\n  });\n\n  return (\n    <MDXProvider {...props} components={components}>\n      {updatedChildren}\n    </MDXProvider>\n  );\n}\n","import React from \"react\";\nimport { MDXProvider } from \"@mdx-js/react\";\n\nimport \"../styles/reveal.css\";\nimport \"../styles/theme.scss\";\n\n/*\nimport Reveal from \"reveal.js\";\nimport Notes from \"reveal.js/plugin/notes/notes.esm.js\";\n*/\nimport { Slide } from \"./slide\";\nimport { PSection } from \"./psection\";\nimport { TitleSlide } from \"./titleslide\";\nimport { Animate } from \"./animate\";\nimport { Example, Tooltip, Definition, Meta } from \"./utils\";\nimport { TwoCols, Flex, Card } from \"./layout\";\n\nclass Presentation extends React.Component {\n  /* componentDidMount() {\n    if (typeof navigator !== \"undefined\") {\n      Reveal.initialize({\n        navigationMode: \"linear\",\n        plugins: [Notes],\n        width: 1000,\n        slideNumber: \"c/t\",\n        hash: true,\n      });\n    }\n  }*/\n\n  render() {\n    const shortcodes = {\n      Slide,\n      TitleSlide,\n      Animate,\n      PSection,\n      Example,\n      Tooltip,\n      Definition,\n      TwoCols,\n      Flex,\n      Card,\n      Meta\n    };\n\n    return (\n      <div style={{ height: \"95vh\" }}>\n        <div className=\"reveal\">\n          <div className=\"slides\">\n            <MDXProvider components={shortcodes}>\n              {this.props.children}\n            </MDXProvider>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Presentation;\n","import React from \"react\";\n\nexport function Slide(props) {\n  return (\n    <section>\n      <h3 className=\"sectionTitle\">{props.secTitle}</h3>\n      {props.children}\n    </section>\n  );\n}\n","import React from \"react\";\n\nexport function PSection(props) {\n  const sectionSlides = React.Children.map(props.children, (child, title) => {\n    return React.cloneElement(child, {\n      secTitle: props.title,\n    });\n  });\n\n  return <section>{sectionSlides}</section>;\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/juanrloaiza/Documents/Universidad/URosario/2021-1S/Diapositivas/src/components/presentation.js\";\nimport { Argument } from \"/src/components/logic/argument\";\nimport { TruthTable } from \"/src/components/logic/truthtable\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst TitleSlide = makeShortcode(\"TitleSlide\");\nconst PSection = makeShortcode(\"PSection\");\nconst Slide = makeShortcode(\"Slide\");\nconst Animate = makeShortcode(\"Animate\");\nconst Definition = makeShortcode(\"Definition\");\nconst Tooltip = makeShortcode(\"Tooltip\");\nconst Example = makeShortcode(\"Example\");\nconst TwoCols = makeShortcode(\"TwoCols\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <TitleSlide title=\"Predicación y negación\" clase=\"Lógica ECH\" mdxType=\"TitleSlide\" />\n    <PSection title=\"¿Qué es una proposición?\" mdxType=\"PSection\">\n      <Slide mdxType=\"Slide\">\n        <h1>{`¿Qué hace la lógica?`}</h1>\n        <p>{`La lógica estudia qué hace que una inferencia sea correcta.`}</p>\n        <Argument mdxType=\"Argument\">\n          <Animate mdxType=\"Animate\">\n            <p>{`(1) Todos los estudiantes son juiciosos.`}</p>\n            <p>{`(2) Marcela es estudiante.`}</p>\n            <p>{`(3) Marcela es juiciosa.`}</p>\n          </Animate>\n        </Argument>\n        <Animate mdxType=\"Animate\">\n          <p>{`Esta inferencia funciona pues es `}<strong parentName=\"p\">{`imposible`}</strong>{` que las premisas sean verdaderas mientras la conclusión sea falsa.`}</p>\n          <ul>\n            <li parentName=\"ul\">{`Si Marcela no es juiciosa, no es estudiante o no todos los estudiantes son juiciosos.`}</li>\n          </ul>\n        </Animate>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Verdad y falsedad`}</h1>\n        <p>{`El ejemplo anterior muestra que nuestras afirmaciones pueden ser `}<strong parentName=\"p\">{`verdaderas`}</strong>{` o `}<strong parentName=\"p\">{`falsas`}</strong>{`.`}</p>\n        <Animate mdxType=\"Animate\">\n          <ul>\n            <li parentName=\"ul\">{`\"En Barranquilla hace mucho calor.\"`}</li>\n            <li parentName=\"ul\">{`\"Bogotá es una ciudad con más de 1'000,000 de habitantes.\"`}</li>\n            <li parentName=\"ul\">{`\"Los estudiantes de humanidades son malos para matemáticas.\"`}</li>\n          </ul>\n          <p>{`En lógica, decimos que estas afirmaciones tienen un `}<strong parentName=\"p\">{`valor de verdad`}</strong>{`.`}</p>\n        </Animate>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Afirmaciones y proposiciones`}</h1>\n        <p>{`En sentido estricto, una afirmación de suyo no es ni verdadera ni falsa.`}</p>\n        <Animate mdxType=\"Animate\">\n          <p>{`Una `}<em parentName=\"p\">{`afirmación`}</em>{` es el `}<strong parentName=\"p\">{`acto de habla`}</strong>{` de afirmar algo.`}</p>\n          <p>{`Aquello que afirmamos, aquello que es verdadero o falso, se conoce como una `}<strong parentName=\"p\">{`proposición`}</strong>{`.`}</p>\n          <Definition word=\"Proposición\" animate mdxType=\"Definition\">\n  Aquello que puede decirse que es verdadero o falso.\n          </Definition>\n          <p>{`En ese orden de ideas, decimos que \"afirmamos (o negamos) una proposición.\"`}</p>\n        </Animate>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Afirmaciones y proposiciones`}</h1>\n        <p>{`¿Cómo es que afirmamos una proposición?`}</p>\n        <Animate mdxType=\"Animate\">\n          <p>{`Generalmente hacemos uso del lenguaje para hacer afirmaciones.`}</p>\n          <p>{`En particular, hacemos uso de `}<strong parentName=\"p\">{`oraciones`}</strong>{` para afirmar proposiciones.`}</p>\n          <ul>\n            <li parentName=\"ul\">{`\"En Barranquilla hace mucho calor.\"`}</li>\n            <li parentName=\"ul\">{`\"Bogotá es una ciudad con más de 1'000,000 de habitantes.\"`}</li>\n            <li parentName=\"ul\">{`\"Los estudiantes de humanidades son malos para matemáticas.\"`}</li>\n          </ul>\n          <p>{`Todas estas son oraciones en español que nos permiten afirmar proposiciones.`}</p>\n        </Animate>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Oraciones y proposiciones`}</h1>\n        <p>{`Es posible que varias oraciones nos permitan afirmar la misma proposición.`}</p>\n        <Animate mdxType=\"Animate\">\n          <ul>\n            <li parentName=\"ul\">{`\"En Barranquilla hace mucho calor.\"`}</li>\n            <li parentName=\"ul\">{`\"Hace mucho calor en Barranquilla.\"`}</li>\n          </ul>\n          <p>{`¡Incluso es posible que oraciones en distintos lenguajes afirmen la misma proposición!`}</p>\n          <ul>\n            <li parentName=\"ul\">{`\"Bogotá es una ciudad con más de 1'000.000 de habitantes.\"`}</li>\n            <li parentName=\"ul\">{`\"Bogotá is a city with more than 1'000.000 inhabitants.\"`}</li>\n          </ul>\n          <p>{`En ese sentido, decimos que estos pares de oraciones `}<strong parentName=\"p\">{`expresan`}</strong>{` la misma proposición.`}</p>\n        </Animate>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Oraciones y proposiciones`}</h1>\n        <p>{`También es posible que la misma oración exprese proposiciones diferentes en distintos momentos.`}</p>\n        <Animate mdxType=\"Animate\">\n          <ul>\n            <li parentName=\"ul\">{`\"Hoy está lloviendo.\"`}</li>\n          </ul>\n          <p>{`Esta oración expresa una proposición verdadera el día que esté lloviendo, pero una falsa el día en el que no.`}</p>\n          <p>{`Lo mismo ocurre con oraciones que contengan palabras como \"Yo\" o \"Él\".`}</p>\n          <ul>\n            <li parentName=\"ul\">{`\"Yo estoy estudiando un pregrado en humanidades.\"`}</li>\n            <li parentName=\"ul\">{`\"A él le va mal en clase de lógica.\"`}</li>\n          </ul>\n        </Animate>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Oraciones y proposiciones`}</h1>\n        <p>{`Finalmente, no todas las oraciones expresan proposiciones.`}</p>\n        <Animate mdxType=\"Animate\">\n          <ul>\n            <li parentName=\"ul\">{`\"¿Qué estás haciendo\"?`}</li>\n            <li parentName=\"ul\">{`\"¡Cuidado!\"`}</li>\n            <li parentName=\"ul\">{`\"Tráeme el cuaderno por favor.\"`}</li>\n          </ul>\n          <p>{`De estas oraciones no podemos decir que expresen algo verdadero o falso (i.e., no podemos decir que tengan un valor de verdad).`}</p>\n          <Tooltip animate mdxType=\"Tooltip\">\n  Una oración expresa una proposición si podemos preguntarnos \"¿De verdad?\"\n          </Tooltip>\n        </Animate>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Ejemplos`}</h1>\n        <p>{`¿Cuáles de estas oraciones expresan una proposición? ¿Y es esta proposición verdadera o falsa (i.e., cuál es su valor de verdad?`}</p>\n        <table style={{\n          \"fontSize\": \"80%\"\n        }}>\n  <colgroup>\n    <col width=\"50%\" />\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Oración</th>\n      <th>¿Proposición?</th>\n      <th>Valor de verdad</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr style={{\n              \"border\": \"0\"\n            }}>\n      <td className=\"fragment\">\"Medellín es la capital de Antioquia.\"</td>\n      <td className=\"fragment\">Sí</td>\n      <td className=\"fragment\">Verdadera</td>\n    </tr>\n    <tr style={{\n              \"border\": \"0\"\n            }}>\n      <td className=\"fragment\">\n        \"Bogotá tiene menos de cinco millones de habitantes.\"\n      </td>\n      <td className=\"fragment\">Sí</td>\n      <td className=\"fragment\">Falsa</td>\n    </tr>\n    <tr style={{\n              \"border\": \"0\"\n            }}>\n      <td className=\"fragment\">\"¿Cuántos habitantes tiene Cartagena?\"</td>\n      <td className=\"fragment\">No</td>\n      <td className=\"fragment\">--</td>\n    </tr>\n    <tr style={{\n              \"border\": \"0\"\n            }}>\n      <td className=\"fragment\">\"Harry Potter es un mago.\"</td>\n      <td className=\"fragment\">Sí</td>\n      <td className=\"fragment\">Verdadera</td>\n    </tr>\n    <tr style={{\n              \"border\": \"0\"\n            }}>\n      <td className=\"fragment\">\"Si tuviese un gato, dormiría con él.\"</td>\n      <td className=\"fragment\">Sí</td>\n      <td className=\"fragment\">¿Verdadera?</td>\n    </tr>\n  </tbody>\n        </table>\n      </Slide>\n    </PSection>\n    <PSection title=\"Predicación\" mdxType=\"PSection\">\n      <Slide mdxType=\"Slide\">\n        <h1>{`Proposiciones atómicas`}</h1>\n        <p>{`¿Cuál es la proposición más básica que podemos pensar?`}</p>\n        <Animate mdxType=\"Animate\">\n          <p>{`La forma más básica de una proposición es decir de un `}<strong parentName=\"p\">{`sujeto`}</strong>{` que tiene un `}<strong parentName=\"p\">{`predicado`}</strong>{`.`}</p>\n          <ul>\n            <li parentName=\"ul\">{`\"Juan es estudiante.\"`}</li>\n            <li parentName=\"ul\">{`\"Andrea es cantante.\"`}</li>\n            <li parentName=\"ul\">{`\"Gabriela juega fútbol.\"`}</li>\n          </ul>\n          <p>{`Todas estas proposiciones tienen la misma forma: `}<strong parentName=\"p\">{`[Sujeto]`}{` es `}{`[Predicado]`}</strong>{`.`}</p>\n        </Animate>\n        <Tooltip animate mdxType=\"Tooltip\">\n  No es necesario que se use la palabra \"es\". \"Gabriela juega fútbol\" también\n  tiene la forma S es P.\n        </Tooltip>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Proposiciones atómicas`}</h1>\n        <p>{`Estas proposiciones compuestas de un sujeto y un predicado se conocen como `}<strong parentName=\"p\">{`proposiciones atómicas`}</strong>{`.`}</p>\n        <Definition word=\"Proposición atómica\" animate mdxType=\"Definition\">\n  Proposición que no puede dividirse en otras proposiciones.\n        </Definition>\n        <Animate mdxType=\"Animate\">\n          <p>{`Las proposiciones atómicas se distinguen de las `}<strong parentName=\"p\">{`proposiciones complejas`}</strong>{`.`}</p>\n          <ul>\n            <li parentName=\"ul\">{`\"Juan es estudiante y Andrea es cantante.\"`}</li>\n            <li parentName=\"ul\">{`\"Juan juega fútbol y también Andrea.\"`}</li>\n          </ul>\n          <p>{`Más tarde volveremos sobre estas proposiciones.`}</p>\n        </Animate>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Sujetos y predicados`}</h1>\n        <p>{`Podemos usar la distinción entre sujetos y predicados para comenzar a introducir nuestro lenguaje formal.`}</p>\n        <Example animate mdxType=\"Example\">Andrea es cantante.</Example>\n        <Animate mdxType=\"Animate\">\n          <p>{`Para referirnos a los `}<strong parentName=\"p\">{`sujetos`}</strong>{`, podemos usar `}<strong parentName=\"p\">{`letras minúsculas`}</strong>{` (a, b, c...).`}</p>\n          <Example animate mdxType=\"Example\">a: Andrea</Example>\n          <p>{`Cuando nos referimos a un sujeto concreto, llamaremos a estas letras `}<strong parentName=\"p\">{`constantes de sujeto.`}</strong>{` Más adelante usaremos las letras `}<em parentName=\"p\">{`x, y...`}</em>{` como `}<strong parentName=\"p\">{`variables`}</strong>{`.`}</p>\n        </Animate>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Sujetos y predicados`}</h1>\n        <p>{`Si usamos las letras minúsculas para los sujetos, podemos usar las `}<strong parentName=\"p\">{`letras mayúsculas`}</strong>{` para los predicados.`}</p>\n        <Example mdxType=\"Example\">\n          <Animate mdxType=\"Animate\">\n            <p>{`[Andrea][es cantante]`}</p>\n            <p>{`a `}{`[es cantante]`}{`.`}</p>\n            <p>{`aC`}</p>\n          </Animate>\n        </Example>\n        <Animate mdxType=\"Animate\">\n          <p>{`Por cuestión de orden, pondremos las letras mayúsculas primero.`}</p>\n        </Animate>\n        <Example mdxType=\"Example\">\n          <Animate mdxType=\"Animate\">\n            <p>{`Andrea es cantante.`}</p>\n            <p>{`Ca`}</p>\n          </Animate>\n        </Example>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Ejemplos`}</h1>\n        <p>{`¿Cómo escribiríamos las siguientes proposiciones?`}</p>\n        <table>\n  <thead>\n    <tr>\n      <th>Oración</th>\n      <th>Formalización</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td className=\"fragment\">Andrea juega fútbol.</td>\n      <td className=\"fragment\">Fa</td>\n    </tr>\n    <tr>\n      <td className=\"fragment\">Gabriela juega fútbol.</td>\n      <td className=\"fragment\">Fg</td>\n    </tr>\n    <tr>\n      <td className=\"fragment\">Juan es cantante.</td>\n      <td className=\"fragment\">Cj</td>\n    </tr>\n    <tr>\n      <td className=\"fragment\">Pedro toca bajo.</td>\n      <td className=\"fragment\">Bp</td>\n    </tr>\n  </tbody>\n        </table>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Predicados con varios sujetos`}</h1>\n        <p>{`Hay predicados que pueden tener más de un sujeto.`}</p>\n        <Example animate mdxType=\"Example\">\n  <b>Chía</b> está al norte de <b>Bogotá</b>.\n        </Example>\n        <Animate mdxType=\"Animate\">\n          <p>{`Podemos usar las letras que presentamos antes para representar estas proposiciones.`}</p>\n        </Animate>\n        <Example animate mdxType=\"Example\">Ncb</Example>\n        <Animate mdxType=\"Animate\">\n          <p>{`En estos casos debemos `}<strong parentName=\"p\">{`respetar el orden`}</strong>{` en el que aparecen los sujetos.`}</p>\n        </Animate>\n        <Example animate mdxType=\"Example\">Nbc: \"Bogotá está al norte de Chía\"</Example>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Guías de traducción`}</h1>\n        <p>{`Cuando hagamos una formalización, es importante llevar registro de cómo estamos formalizando.`}</p>\n        <Animate mdxType=\"Animate\">\n          <p>{`Para ello podemos usar una `}<strong parentName=\"p\">{`guía de traducción`}</strong>{`.`}</p>\n          <div style={{\n            \"width\": \"50%\",\n            \"margin\": \"2rem auto\",\n            \"border\": \"1px solid #aaa\",\n            \"borderRadius\": \"5px\",\n            \"padding\": \"1rem\"\n          }}>\n            <p align=\"center\"><b>Guía de traducción</b></p>\n            <TwoCols mdxType=\"TwoCols\">\n              <div>\n                <p>{`a: Andrea`}</p>\n                <p>{`b: Bernal`}</p>\n                <p>{`c: Carlos`}</p>\n              </div>\n              <div>\n                <p>{`Cx: x canta`}</p>\n                <p>{`Bxy: x baila con y`}</p>\n              </div>\n            </TwoCols>\n          </div>\n        </Animate>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Resumen intermedio`}</h1>\n        <p>{`Para representar oraciones, usamos la siguiente convención.`}</p>\n        <TwoCols style={{\n          \"margin\": \"2rem auto\"\n        }} mdxType=\"TwoCols\">\n          <div className=\"fragment\">\n            <p><strong parentName=\"p\">{`Sujetos`}</strong></p>\n            <small>\n  <p>Letras minúsculas</p>\n            </small>\n            <p>{`Juan: j`}</p>\n            <p>{`Andrea: a`}</p>\n            <p>{`Paola: p`}</p>\n          </div>\n          <div className=\"fragment\">\n            <p><strong parentName=\"p\">{`Predicados`}</strong></p>\n            <small>\n  <p>Letras mayúsculas</p>\n            </small>\n            <p>{`Cx: `}<strong parentName=\"p\">{`x`}</strong>{` canta`}</p>\n            <p>{`Bxy: `}<strong parentName=\"p\">{`x`}</strong>{` baila con `}<strong parentName=\"p\">{`y`}</strong></p>\n            <p>{`Exyz: `}<strong parentName=\"p\">{`x`}</strong>{` está entre `}<strong parentName=\"p\">{`y`}</strong>{` y `}<strong parentName=\"p\">{`z`}</strong></p>\n          </div>\n        </TwoCols>\n        <Animate mdxType=\"Animate\">\n          <p>{`Las oraciones más básicas de nuestro lenguaje lucen entonces así:`}</p>\n          <Example animate mdxType=\"Example\">\n            <p>{`Ca, Cj, Bap, Bpa, Epaj, Epja...`}</p>\n          </Example>\n        </Animate>\n      </Slide>\n    </PSection>\n    <PSection title=\"Negación\" mdxType=\"PSection\">\n      <Slide mdxType=\"Slide\">\n        <h1>{`Negación`}</h1>\n        <p>{`Así como podemos afirmar una proposición, podemos también negarla.`}</p>\n        <Example animate mdxType=\"Example\">\n          <p>{`Juan `}<strong parentName=\"p\">{`no`}</strong>{` juega fútbol.`}</p>\n        </Example>\n        <Animate mdxType=\"Animate\">\n          <p>{`Para ver cómo podemos expresar mejor las negaciones, reorganicemos la oración.`}</p>\n          <Example animate mdxType=\"Example\">\n            <p><strong parentName=\"p\">{`No es verdad`}</strong>{` que Juan juegue fútbol.`}</p>\n          </Example>\n          <p>{`Puesta así, vemos que la oración dice que la proposición `}<strong parentName=\"p\">{`Juan juega fútbol`}</strong>{` no es verdadera (i.e., es falsa).`}</p>\n        </Animate>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Negación`}</h1>\n        <Example mdxType=\"Example\">\n          <p><strong parentName=\"p\">{`No es verdad`}</strong>{` que Juan juegue fútbol.`}</p>\n        </Example>\n        <Animate mdxType=\"Animate\">\n          <p>{`Si entendemos esta proposición como la `}<strong parentName=\"p\">{`negación`}</strong>{` de la proposición `}<strong parentName=\"p\">{`Juan juega fútbol`}</strong>{`, podemos expresar esa negación con el símbolo '~' (o '¬').`}</p>\n        </Animate>\n        <Example animate mdxType=\"Example\">\n          <span className=\"fragment\" data-fragment-index=\"9\">\n  ~\n          </span>\nFj\n        </Example>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Operadores lógicos`}</h1>\n        <p>{`El símbolo '~' nos dice que una proposición está siendo negada. Este símbolo (y otros que veremos luego) son conocidos como `}<strong parentName=\"p\">{`operadores lógicos`}</strong>{`.`}</p>\n        <Animate mdxType=\"Animate\">\n          <p>{`Los operadores lógicos son símbolos que `}<strong parentName=\"p\">{`operan`}</strong>{` sobre una proposición.`}</p>\n          <p>{`En el caso del operador de negación, este operador dice que la proposición a la que corresponde es falsa.`}</p>\n        </Animate>\n        <Example mdxType=\"Example\">\n          <Animate mdxType=\"Animate\">\n            <p>{`Marcela no es cantante.`}</p>\n            <p>{`~Cm`}</p>\n          </Animate>\n        </Example>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Ejemplos`}</h1>\n        <p>{`¿Cómo expresaríamos cada una de las siguientes proposiciones?`}</p>\n        <table>\n  <thead>\n    <tr>\n      <th>Proposición</th>\n      <th>Formalización</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td className=\"fragment\">Paola no juega ajedrez.</td>\n      <td className=\"fragment\">~Ap</td>\n    </tr>\n    <tr>\n      <td className=\"fragment\">Sebastián no es boxeador.</td>\n      <td className=\"fragment\">~Bs</td>\n    </tr>\n    <tr>\n      <td className=\"fragment\">Óscar no es estudiante.</td>\n      <td className=\"fragment\">~Eo</td>\n    </tr>\n    <tr>\n      <td className=\"fragment\">Bernal no baila con Pedro.</td>\n      <td className=\"fragment\">~Bbp</td>\n    </tr>\n  </tbody>\n        </table>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Tablas y valores de verdad`}</h1>\n        <p>{`Consideremos la proposición `}<strong parentName=\"p\">{`Juan juega ajedrez`}</strong>{`. Esta proposición puede ser verdadera o puede ser falsa.`}</p>\n        <Animate mdxType=\"Animate\">\n          <p>{`Podemos resumir estas posibilidades en una `}<strong parentName=\"p\">{`tabla de verdad`}</strong>{`.`}</p>\n          <table style={{\n            \"textAlign\": \"center\"\n          }}>\n  <thead>\n    <tr className=\"fragment\">\n      <th>Juan juega ajedrez (Aj)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr className=\"fragment\">\n      <td>V</td>\n    </tr>\n    <tr className=\"fragment\">\n      <td>F</td>\n    </tr>\n  </tbody>\n          </table>\n          <p>{`Cada fila representa una posibilidad (i.e., una `}<strong parentName=\"p\">{`situación`}</strong>{`).`}</p>\n        </Animate>\n      </Slide><Slide mdxType=\"Slide\">\n        <h1>{`Tablas y valores de verdad`}</h1>\n        <p>{`Hemos dicho que el operador de negación ('~') nos permite expresar que una proposición es falsa.`}</p>\n        <p>{`¿Qué pasa entonces cuando introducimos negaciones en una tabla de verdad?`}</p>\n        <table style={{\n          \"textAlign\": \"center\"\n        }}>\n  <thead>\n    <tr>\n      <th className=\"fragment\" data-fragment-index=\"2\">\n        Aj\n      </th>\n      <th className=\"fragment\" data-fragment-index=\"4\">\n        ~Aj\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td className=\"fragment\" data-fragment-index=\"3\">\n        V\n      </td>\n      <td className=\"fragment\" data-fragment-index=\"5\">\n        F\n      </td>\n    </tr>\n    <tr>\n      <td className=\"fragment\" data-fragment-index=\"3\">\n        F\n      </td>\n      <td className=\"fragment\" data-fragment-index=\"6\">\n        V\n      </td>\n    </tr>\n  </tbody>\n        </table>\n        <Animate mdxType=\"Animate\">\n          <p>{`En las situaciones en las que una proposiciones es verdadera, su negación es falsa. Y en situaciones en las que una proposición es falsa, su negación es verdadera.`}</p>\n        </Animate>\n      </Slide>\n      <Slide mdxType=\"Slide\">\n        <h1>{`Resumen`}</h1>\n        <Animate mdxType=\"Animate\">\n          <ul>\n            <li parentName=\"ul\">{`Una proposición es aquello que podemos decir que es verdadero o falso.`}</li>\n            <li parentName=\"ul\">{`Las proposiciones más básicas (i.e., atómicas) se componen de al menos un sujeto y un predicado.`}</li>\n            <li parentName=\"ul\">{`Usamos letras minúsculas (a, b, c...) para referirnos a sujetos.`}</li>\n            <li parentName=\"ul\">{`Usamos letras mayúsculas (A, B, C...) para referirnos a predicados.`}</li>\n            <li parentName=\"ul\">{`Usamos el símbolo '~' para decir que una proposición está siendo negada.`}\n              <ul parentName=\"li\">\n                <li parentName=\"ul\">{`Si la proposición era verdadera, su negación es falsa.`}</li>\n                <li parentName=\"ul\">{`Si la proposición era falsa, su negación es verdadera.`}</li>\n              </ul>\n            </li>\n          </ul>\n        </Animate>\n      </Slide>\n    </PSection>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\";\n\nexport function TitleSlide(props) {\n  const date = new Date().getFullYear();\n\n  return (\n    <section className=\"title\">\n      <h3>{props.clase}</h3>\n      <h1> {props.title}</h1>\n\n      <div className=\"author\">Juan R. Loaiza</div>\n\n      <small>\n        Escuela de Ciencias Humanas <br />\n        Universidad del Rosario <br />\n        {date}\n      </small>\n    </section>\n  );\n}\n"],"sourceRoot":""}